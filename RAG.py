from qdrant_client import QdrantClient
from qdrant_client.models import Filter, FieldCondition, MatchValue, MinShould, MatchAny
from sentence_transformers import SentenceTransformer
import google.generativeai as genai
import os
import requests
from dotenv import load_dotenv
import os

load_dotenv("config.env")  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.env

api_key = os.getenv("GEMINI_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")      
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
COLLECTION_NAME = os.getenv("COLLECTION_NAME")
MODEL_ID = "google/gemini-2.5-flash-preview"
client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)
embedding_model = SentenceTransformer("intfloat/multilingual-e5-large")

# –ù–æ–≤—ã–π DialogueContext —Å chat-style –∏—Å—Ç–æ—Ä–∏–µ–π
class DialogueContext:
    def __init__(self, max_history: int = 3):
        self.history = []
        self.max_history = max_history
    
    def add_message(self, role: str, content: str):
        self.history.append({"role": role, "content": content})
        if len(self.history) > self.max_history * 2:
            self.history = self.history[-self.max_history * 2:]

    def get_formatted_history(self) -> str:
        return "\n".join([f"{m['role']}: {m['content']}" for m in self.history])

    def get_chat_messages(self, prompt: str):
        return self.history + [{"role": "user", "content": prompt}]

#–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥
def get_embedding(text: str):
    return embedding_model.encode(text, normalize_embeddings=True).tolist()


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π get_model_response ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç messages
def get_model_response(messages, api_key: str, model_name: str = MODEL_ID, max_tokens: int = 1000):
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": model_name,
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": max_tokens
    }

    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        raise Exception(f"Error {response.status_code}: {response.text}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è RAG —Å –¥–∏–∞–ª–æ–≥–æ–º
def rag_answer(question, program_name, dialogue_context: DialogueContext, top_k: int = 15):
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    history = dialogue_context.history[-6:]
    recent_history = "\n".join(f"{m['role']}: {m['content']}" for m in history)
    
    # –≠–º–±–µ–¥–¥–∏–Ω–≥
    full_query = f"{recent_history}\nuser: {question}"
    query_vector = get_embedding(f"query: {full_query}")

    # –ü–æ–∏—Å–∫
    search_filter = (
        Filter(must=[FieldCondition(
            key="program",
            match=MatchAny(any=[program_name.lower(), "itmoshka_bot"]))])
        if program_name else None
    )

    results = client.search(
        collection_name=COLLECTION_NAME,
        query_vector=query_vector,
        limit=top_k,
        query_filter=search_filter
    )

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    program_chunks = []
    itmoshka_chunks = []
    
    for hit in results:
        if not hit.payload:
            continue
        source = hit.payload.get("program", "").lower()
        chunk_text = hit.payload.get("—Ç–µ–∫—Å—Ç") or hit.payload.get("text") or ""
        if source == "itmoshka_bot":
            itmoshka_chunks.append(chunk_text)
        else:
            program_chunks.append(chunk_text)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º itmoshka_bot –¥–æ 2 —á–∞–Ω–∫–æ–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω program_name
    if program_name != "itmoshka_bot":
        itmoshka_chunks = itmoshka_chunks[:2]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_chunks = program_chunks + itmoshka_chunks
    context = "\n---\n".join(context_chunks)

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    #context_chunks = [hit.payload.get("—Ç–µ–∫—Å—Ç") or hit.payload.get("text") for hit in results if hit.payload]
    #context = "\n---\n".join(context_chunks)

    # –ü—Ä–æ–º–ø—Ç
    prompt = f"""
–¢—ã ‚Äî –ò—Ç–º–æ—à–∫–∞, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ò–¢–ú–û. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –≤—ã–±–æ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –æ–±—É—á–µ–Ω–∏–∏, –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞—Ö. 

–û—Ç–≤–µ—á–∞–π **–ø–æ —Å—É—Ç–∏**, **–±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π** –∏ **–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤**. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è ‚Äî —Å—Ç–∞—Ä–∞–π—Å—è —É–ª–æ–∂–∏—Ç—å—Å—è –≤ **8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π**. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏, –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã. –ü–∏—à–∏ **—á–µ–ª–æ–≤–µ—á–Ω–æ**, –∫–∞–∫ –∂–∏–≤–æ–π –∏ —É–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.
{'–í–æ—Ç –≤—ã–¥–µ—Ä–∂–∫–∏ —Å —Å–∞–π—Ç–∞ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –ò–¢–ú–û' + (f' ¬´{program_name}¬ª:' if program_name else ':')}
{context}
–û—Ç–≤–µ—á–∞–π, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–æ–≥—Ä–∞–º–º, —Å—Ä–æ–∫–∞–º, —Ü–∏—Ñ—Ä–∞–º. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –¥–æ–ø–æ–ª–Ω–∏ –æ—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π, –Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫. –§–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.

**–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ò–¢–ú–û –∏ –¥—Ä—É–≥–∏–º–∏ –≤—É–∑–∞–º–∏** ‚Äî –º—è–≥–∫–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–π —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ò–¢–ú–û –±–µ–∑ –∫—Ä–∏—Ç–∏–∫–∏ –¥—Ä—É–≥–∏—Ö:
‚Ä¢ –ø—Ä–æ–µ–∫—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –∫–µ–π—Å–∞–º–∏ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏  
‚Ä¢ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏  
‚Ä¢ –ò—Ç–º–æ - –ª–∏–¥–µ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
‚Ä¢ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã 
‚Ä¢ –≥–∏–±–∫–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω  
‚Ä¢ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏, —Ö–∞–∫–∞—Ç–æ–Ω—ã, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏  
‚Ä¢ –∫–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —É–∂–µ –≤–æ –≤—Ä–µ–º—è —É—á—ë–±—ã  
‚Ä¢ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ 

**–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ–ø—ã—Ç–Ω—ã–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —É–∂–µ —É—á–∏–ª—Å—è)** ‚Äî –Ω–µ –æ–±—ä—è—Å–Ω—è–π –æ—á–µ–≤–∏–¥–Ω–æ–µ, –¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞:
‚Ä¢ –æ—Ç–ª–∏—á–∏—è –ø–æ–¥—Ö–æ–¥–∞ –ò–¢–ú–û  
‚Ä¢ –ø—Ä–æ–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å  
‚Ä¢ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è

–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî 60% –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, 50% —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏. –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.  
–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —É—Å—Ç–∞–ª –∏–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏, —Å–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä:  
*¬´–¢–∞–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –•–æ—á–µ—à—å, —Ä–∞–∑–±–µ—Ä—ë–º –≤–º–µ—Å—Ç–µ, —á—Ç–æ —Ç–µ–±–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ?¬ª*

–ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é, –æ–±—É—á–µ–Ω–∏—é, –ò–¢–ú–û –∏–ª–∏ –∫–∞—Ä—å–µ—Ä–µ ‚Äî –æ–±—ä—è—Å–Ω–∏ –≤–µ–∂–ª–∏–≤–æ, —á—Ç–æ —Ç—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —ç—Ç–∏—Ö —Ç–µ–º–∞—Ö.

–ó–∞–ø–æ–º–Ω–∏: –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ ‚Äî —ç—Ç–æ –ø–ª–∞—Ç–Ω—ã–µ.

–ö–∞–∂–¥—ã–µ 2‚Äì3 –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥. 
–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–∏–∞–ª–æ–≥.

–í–æ–ø—Ä–æ—Å: {question}  
–û—Ç–≤–µ—Ç:
""".strip()

    messages = dialogue_context.get_chat_messages(prompt)
    response = get_model_response(messages=messages, api_key=api_key)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dialogue_context.add_message("user", question)
    dialogue_context.add_message("assistant", response)

    # –•–∏–Ω—Ç
    additional_hint = ""
    if program_name == "itmoshka_bot" and any(kw in question.lower() for kw in ["–ø—Ä–æ–≥—Ä–∞–º", "–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä", "—É—á–∏—Ç", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω"]):
        additional_hint = '\n\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –Ω–∞–∂–º–∏: \n**–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ üíô**'

    return response + additional_hint

    
