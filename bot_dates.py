#–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö
from telebot import types
import mysql.connector
import random
import pymysql
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from dotenv import load_dotenv
load_dotenv("config.env") # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
import os

def important_dates(bot, show_main_menu):
    def connect_db_0():
        return pymysql.connect(
            host=os.getenv("db_host"),
            user=os.getenv("db_user"),
            password=os.getenv("db_password"),
            database=os.getenv("db_name"),
            charset='utf8mb4',
            #port = "3306",
            cursorclass=pymysql.cursors.DictCursor 
        )
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π (–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é) –¥–ª—è –≤—Å–µ—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø-3 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–∞–π–∫–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def fetch_upcoming_events():
        conn = connect_db_0()
        try:
            with conn.cursor() as cursor:
                sql = """
                    SELECT pe.program_name, pe.event_name, pe.event_date, pe.description, upi.user_id
                    FROM program_events pe
                    JOIN user_program_interest upi ON pe.program_name = upi.program_name
                    WHERE 
                        (DATE(pe.event_date) = CURDATE() + INTERVAL 1 DAY OR DATE(pe.event_date) = CURDATE() + INTERVAL 7 DAY)
                        AND (
                            upi.liked = 1
                            OR upi.program_name IN (
                                SELECT program_name FROM (
                                    SELECT program_name
                                    FROM user_program_interest
                                    WHERE user_id = upi.user_id
                                    ORDER BY questions_count DESC
                                    LIMIT 3
                                ) AS top_programs
                            )
                        );
                """
                cursor.execute(sql)
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏ (–±–ª–∞–≥–æ–¥–∞—Ä—è cursorclass=DictCursor)
                return cursor.fetchall()
        finally:
            conn.close()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Å–æ–±—ã—Ç–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    def send_event_reminders():
        events = fetch_upcoming_events()
        
        for event in events:
            try:
                if not isinstance(event, dict):
                    continue
                    
                user_id = event['user_id']
                event_name = event['event_name']
                program_name = event['program_name']
                event_date = event['event_date'].strftime('%d.%m.%Y')
                description = event['description']
    
                message = (
                    f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞—é: *{event_name}*\n –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ *{program_name}* "
                    f"–ø—Ä–æ–π–¥—ë—Ç {event_date}.\n\n{description}"
                )
                
                bot.send_message(user_id, message, parse_mode='Markdown')
                
            except Exception as e:
                print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")
                
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ 11:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_event_reminders, 'cron', hour=11, minute=00)
    scheduler.start()
    # === –•–µ–Ω–¥–ª–µ—Ä—ã ===
    @bot.message_handler(func=lambda message: message.text == "–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã")
    def handle_important_dates(message):
        user_id = message.from_user.id
        events = fetch_upcoming_events_for_user(user_id)
        
        if not events:
            bot.send_message(
            message.chat.id,
            "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª: <b>–í—ã–±—Ä–∞—Ç—å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É</b> –∏ —è –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–ºü§ó",
            parse_mode="HTML")

        else:
            message_text = "üìÖ *–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏:*\n\n"
            
            for event in events:
                try:
                    event_name = event['event_name']
                    program_name = event['program_name'].strip().capitalize()
                    event_date = event['event_date'].strftime('%d.%m.%Y')
                    description = event['description']
    
                    message_text += (
                        f"*{event_name}*\n"
                        f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: *{program_name}*\n"
                        f"–î–∞—Ç–∞: {event_date}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                    )
                    
                except Exception as e:
                    print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")
            
            bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
        show_main_menu(message.chat.id)
    
    def fetch_upcoming_events_for_user(user_id):
        conn = connect_db_0()
        try:
            with conn.cursor() as cursor:
                sql = """
                    SELECT 
                        pe.program_name, 
                        pe.event_name, 
                        pe.event_date, 
                        pe.description
                    FROM program_events pe
                    JOIN user_program_interest upi ON pe.program_name = upi.program_name
                    WHERE 
                        upi.user_id = %s
                        AND DATE(pe.event_date) BETWEEN CURDATE() AND CURDATE() + INTERVAL 14 DAY
                        AND (
                            upi.liked = 1
                            OR upi.program_name IN (
                                SELECT program_name FROM (
                                    SELECT program_name
                                    FROM user_program_interest
                                    WHERE user_id = %s
                                    ORDER BY questions_count DESC
                                    LIMIT 3
                                ) AS top_programs
                            )
                        )
                    ORDER BY pe.event_date ASC
                    LIMIT 10;
                """
                cursor.execute(sql, (user_id, user_id))
                return cursor.fetchall()
        finally:
            conn.close()
