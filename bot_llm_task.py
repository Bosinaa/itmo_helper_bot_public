# –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
from telebot import types
import mysql.connector
import re
import random
from sentence_transformers import SentenceTransformer
from collections import defaultdict
from qdrant_client import QdrantClient
from qdrant_client.models import Filter, FieldCondition, MatchAny
from dotenv import load_dotenv
import os

load_dotenv("config.env") # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞

from RAG  import rag_answer, DialogueContext
from db import connect_db
from programs_file import programs_list, emotion_stickers, salary_stickers

dialogue_contexts = {}
QDRANT_URL = os.getenv("QDRANT_URL")      
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)

def llm_tasks(bot, show_main_menu):

    def strip_non_letters(text):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ
        —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ, –¥–≤–æ–µ—Ç–æ—á–∏—è –∏ –¥–µ—Ñ–∏—Å—ã.
        –û—Å–æ–±–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ 'devops' –∏ 'it', —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.
        """
        text = text.lower()
        if "devops" in text:
            return "devops-–∏–Ω–∂–µ–Ω–µ—Ä –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        elif "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in text:
            return "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å it-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        text = re.sub(r"[^–∞-—è—ë ,:-]", "", text)
        text = re.sub(r"\s+", " ", text)
        text = text.strip()
        return text
        
    user_state = {}
    
    @bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    def back_to_main_menu(message):
        chat_id = message.chat.id
        if chat_id in user_state:
            del user_state[chat_id]
        show_main_menu(chat_id)

    @bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üíô")
    def type_ask(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("–í–æ–ø—Ä–æ—Å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        btn2 = types.KeyboardButton("–í–æ–ø—Ä–æ—Å –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º")
        btn3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, –æ —á–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å", reply_markup=markup)
    @bot.message_handler(func=lambda message: message.text == "–£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ" or message.text == "–í–æ–ø—Ä–æ—Å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"
                        or message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ üíô")
    def ask_program_name(message):
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
        )
        user_state[message.chat.id] = {'step': 'waiting_for_program_name'}
    @bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")
    def ask_repeat_program_selection(message):
        user_id = message.chat.id
        if user_id not in user_state:
            user_state[user_id] = {}
        user_state[user_id]['step'] = 'waiting_for_program_name'
        user_state[user_id]['program_name'] = 'itmoshka_bot'
        ask_program_name(message)
    @bot.message_handler(func=lambda message: message.text == "–í–æ–ø—Ä–æ—Å –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º" or message.text == "–°–ø—Ä–æ—Å–∏—Ç—å –Ω–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")
    def ask_no_program(message):
        program_name = ''
        user_id = message.chat.id
        user_state[user_id] = {
            'step': 'waiting_for_question',
            'program_name': 'itmoshka_bot',
            'message_count': 0 
        }
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ üíô"))
        markup.add(types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        bot.send_message(
        user_id,
        "–û—Ç–ª–∏—á–Ω–æ! –Ø –≥–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≤—Å—ë –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –ò–¢–ú–û.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏\n\n<b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ üíô</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )
    @bot.message_handler(func=lambda message: message.text == "–•–æ—á—É –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É üíú")
    def handle_like_program(message):
        user_id = message.chat.id
        program_name = user_state.get(user_id, {}).get("program_name")
    
        if program_name:
            like_program(user_id, program_name)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –≤ –ë–î
            clean_program_name = " ".join(program_name.lower().split()).capitalize()
            msg = (
                f"–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã <b>{clean_program_name}</b>\n"
                f"–ê –ø–æ–∫–∞ —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ü§ó"
            )
            bot.send_message(user_id, msg, parse_mode="HTML")
        else:
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É")
            
        
    @bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get('step') == 'waiting_for_program_name' and user_state.get(message.chat.id, {}).get('program_name') != '')
    def handle_program_name(message):
        program_name = strip_non_letters(message.text.strip())
        user_id = message.chat.id
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Å–ø–∏—Å–∫–µ
        if program_name not in programs_list:
            bot.send_sticker(user_id, "CAACAgIAAxkBAAIGbmg0TyV0K-v_uOpXJs1hhzviKRMYAAJAhQACB3ChSUp1xCrLZLXbNgQ")
            bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã \n–ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞")
            user_state[message.chat.id] = {'step': 'waiting_for_program_name'}
            return
        user_id = message.chat.id
        if user_id not in user_state:
            user_state[user_id] = {}
        user_state[user_id] = {
            'step': 'waiting_for_question',
            'program_name': program_name,
            'message_count': 0 
        }
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–•–æ—á—É –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É üíú")
        markup.add("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add("–°–ø—Ä–æ—Å–∏—Ç—å –Ω–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")

        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –Ø –≥–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

    def like_program(user_id, program_name): #–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        conn = connect_db()
        with conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO user_program_interest (user_id, program_name, questions_count, liked, updated_at)
                    VALUES (%s, %s, 0, TRUE, NOW())
                    ON DUPLICATE KEY UPDATE
                        liked = TRUE,
                        updated_at = NOW()
                """, (user_id, program_name.lower()))
            conn.commit()

    def convert_bold_markdown_to_html(text: str) -> str:
        return re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", text)
    def format_list_markers(text: str) -> str:
        text = re.sub(r"(?m)^\*\s+", "‚Ä¢ ", text)
        return text
    def prepare_html_answer(text: str) -> str:
        html = convert_bold_markdown_to_html(text)
        html = format_list_markers(html)
        return html

    @bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get('step') == 'waiting_for_question')
    def handle_question_for_program(message):
        user_id = message.chat.id
        state = user_state.get(user_id)
        if not state or 'program_name' not in state:
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.")
            return
        question = message.text
        program_name = user_state[user_id]['program_name'].lower()
    
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        dialogue_context = dialogue_contexts.setdefault(user_id, DialogueContext())
    
        save_user_question(user_id, program_name, question)
        thinking_msg = bot.send_message(user_id, "‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
        try:
            answer = prepare_html_answer(rag_answer(question, program_name, dialogue_context=dialogue_context))
            bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
    
            if is_salary_question(question):
                sticker_id = random.choice(salary_stickers)
                bot.send_sticker(user_id, sticker_id)
            elif should_send_sticker(user_id):
                send_random_emotion_sticker(user_id)
                user_state[user_id]["message_count"] = 0
            bot.send_message(user_id, answer, parse_mode="HTML")
    
        except Exception as e:
            bot.delete_message(chat_id=user_id, message_id=thinking_msg.message_id)
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

    def save_user_question(user_id, program_name, question):
        conn = connect_db()
        with conn:
            with conn.cursor() as cursor:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ users_questions
                cursor.execute("""
                    INSERT INTO users_questions (user_id, program_name, question)
                    VALUES (%s, %s, %s)
                """, (user_id, program_name, question))
                 #–∑–∞–ø–æ–º–∏–Ω–∞–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                cursor.execute("""
                    INSERT INTO user_program_interest (user_id, program_name, questions_count, liked, updated_at)
                    VALUES (%s, %s, 1, FALSE, NOW())
                    ON DUPLICATE KEY UPDATE
                        questions_count = questions_count + 1,
                        updated_at = NOW()
                """, (user_id, program_name))
            conn.commit()
            
    def is_salary_question(question: str) -> bool:
        keywords = ["–∑–∞—Ä–ø–ª–∞—Ç", "–æ–ø–ª–∞—Ç", "–¥–æ—Ö–æ–¥", "–∑–∞—Ä–∞–±–æ—Ç", "—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—è—Ç", "—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—é—Ç"]
        return any(kw in question.lower() for kw in keywords)
    def should_send_sticker(user_id):
        state = user_state.setdefault(user_id, {})
        count = state.get("message_count", 0) + 1
        state["message_count"] = count
        return count >= random.choice([4, 5, 6])
    def send_random_emotion_sticker(chat_id):
        sticker_id = random.choice(emotion_stickers)
        bot.send_sticker(chat_id, sticker_id)