#–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ RandonCoffee - –ø–æ–¥–±–æ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å—Ä–µ–¥–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤
import schedule
import time
from datetime import datetime, timedelta
import random
import mysql.connector
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os

from db import connect_db

load_dotenv("config.env")  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.env
STICKERS_RANDOM_COFFEE = [
"CAACAgIAAxkBAAIGb2g0TztSdWZO6rni7C8OQZWn59NOAAIheQAC136ZSWt9_w0gh9vZNgQ",  
"CAACAgIAAxkBAAIGbGg0TuSO0aNPWvKm60Bwiw9NULOEAAJtdgACpr6hSXy4hRKdMQ4ONgQ"]
def random_coffee(bot, show_main_menu):
    user_states_random_coffee = {}
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
    @bot.message_handler(func=lambda message: message.text in ["–ö–æ–Ω–µ—á–Ω–æüíú", "–ù–µ —Å–µ–π—á–∞—Å"])
    def handle_participation(message):
        user_id = message.from_user.id
        if message.text == "–ö–æ–Ω–µ—á–Ω–æüíú":
            actual_flag = True
            bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –í–µ—Ä–Ω—É—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥üòå")
        else:
            actual_flag = False
            bot.send_message(user_id, "–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑üôÇ")
    
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("UPDATE users_random_coffee SET actual = %s WHERE user_id = %s", (actual_flag, user_id))
        conn.commit()
        cursor.close()
        conn.close()
    #–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è    
    @bot.message_handler(func=lambda message: message.text == "Random Coffee")
    def ask_interest(message):
        chat_id = message.chat.id
        conn = connect_db()
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM users_random_coffee WHERE user_id = %s", (chat_id,))
        exists = cur.fetchone() is not None
        if exists:
            cur.execute("UPDATE users_random_coffee SET actual = TRUE WHERE user_id = %s", (chat_id,))
            conn.commit()
            cur.close()
            conn.close()
            user_states_random_coffee[chat_id] = {"stage": "menu"}
            handle_state(message) 
        else:
            cur.close()
            conn.close()
            user_states_random_coffee[chat_id] = {"stage": "auth"}  
            bot.send_message(chat_id, "–•–æ—á–µ—à—å –ø–æ–Ω–µ—Ç–≤–æ—Ä–∫–∞—Ç—å? –í–≤–µ–¥–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: 11111)")

    @bot.message_handler(func=lambda message: message.chat.id in user_states_random_coffee and message.text in [
    "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
    "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞",
    "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
] or user_states_random_coffee.get(message.chat.id, {}).get("stage") in ["info_1"])
    def handle_state(message):
        chat_id = message.chat.id
        state = user_states_random_coffee[chat_id]
    
        if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
            user_states_random_coffee[chat_id] = {"stage": "info_1"}
            bot.send_message(chat_id, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")
            return
    
        elif message.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞":
            conn = connect_db()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM users_random_coffee WHERE user_id = %s", (chat_id,))
            conn.commit()
            cursor.close()
            conn.close()
            user_states_random_coffee.pop(chat_id, None)
            bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—ÇüôÇ \n–Ø –±—É–¥—É —Ç–µ–±—è –∂–¥–∞—Ç—å –∏ –æ—á–µ–Ω—å —Å–∫—É—á–∞—Ç—å")
            bot.send_sticker(chat_id, "CAACAgIAAxkBAAIGdGg0T9VTm9UmuNASzZuBAakt1KoCAAJzdQACmWihSdo0w9rBPpimNgQ")
            show_main_menu(chat_id)
            return
    
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            user_states_random_coffee.pop(chat_id, None)
            show_main_menu(chat_id)
            return
    
        if state["stage"] == "menu":
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
                types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"),
                types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            )
            bot.send_message(chat_id, "–£–∂–µ –∏—â—É –∫–æ–≥–æ-—Ç–æ –¥–ª—è —Ç–µ–±—è‚ò∫Ô∏è\n–í–µ—Ä–Ω—É—Å—å –≤ —á–µ—Ç–≤–µ—Ä–≥", reply_markup=keyboard)
            user_states_random_coffee[chat_id] = {"stage": "good"}
            return
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤)
        if state["stage"] == "auth":
            if message.text.strip() == "11111":
                conn = connect_db()
                cur = conn.cursor()
                cur.execute("SELECT telegram_name FROM users WHERE id = %s", (chat_id,))
                result = cur.fetchone()
                cur.close()
                conn.close()
    
                if result and result[0]:
                    telegram_name = result[0]
                    user_states_random_coffee[chat_id]["telegram_name"] = telegram_name
                    user_states_random_coffee[chat_id]["stage"] = "confirm_username"
    
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    keyboard.add(
                        types.KeyboardButton("–î–∞"),
                        types.KeyboardButton("–ù–µ—Ç")
                    )
                    bot.send_message(chat_id, f"–¢–≤–æ–π –Ω–∏–∫ –≤ Telegram: {telegram_name}\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–≤–æ–π –Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ. –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
                    user_states_random_coffee[chat_id]["stage"] = "get_username"
            else:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
    
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        elif state["stage"] == "confirm_username":
            if message.text == "–î–∞":
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ :)")
                user_states_random_coffee[chat_id]["stage"] = "info_1"
            elif message.text == "–ù–µ—Ç":
                bot.send_message(chat_id, "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
                user_states_random_coffee[chat_id]["stage"] = "get_username"
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
    
        # –í–≤–æ–¥ Telegram –Ω–∏–∫–∞ –≤—Ä—É—á–Ω—É—é
        elif state["stage"] == "get_username":
            telegram_name = message.text.strip()
            if not telegram_name.startswith("@"):
                telegram_name = "@" + telegram_name
            user_states_random_coffee[chat_id]["telegram_name"] = telegram_name
            user_states_random_coffee[chat_id]["stage"] = "info_1"
            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ :)")
    
        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        elif state["stage"] == "info_1":
            info = message.text.strip()
            telegram_name = user_states_random_coffee[chat_id].get("telegram_name", "")
    
            conn = connect_db()
            cur = conn.cursor()
    
            query = """
            INSERT INTO users_random_coffee (user_id, telegram_name, user_info, joined_at, actual, is_new)
            VALUES (%s, %s, %s, NOW(), TRUE, TRUE)
            ON DUPLICATE KEY UPDATE
            telegram_name = VALUES(telegram_name),
            user_info = VALUES(user_info),
            actual = TRUE,
            joined_at = NOW(),
            is_new = FALSE
            """
    
            cur.execute(query, (chat_id, telegram_name, info))
            conn.commit()
            cur.close()
            conn.close()
    
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
                types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞"),
                types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            )
    
            bot.send_message(chat_id, "–ü–æ–¥–±–∏—Ä–∞—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –í–µ—Ä–Ω—É—Å—å –≤ —á–µ—Ç–≤–µ—Ä–≥, –¥–æ –≤—Å—Ç—Ä–µ—á–∏ üëã", reply_markup=keyboard)
            user_states_random_coffee[chat_id] = {"stage": "menu"}
            show_main_menu(chat_id)

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_username_yes", "confirm_username_no"])
    def handle_username_confirmation(call):
        chat_id = call.message.chat.id
    
        if call.data == "confirm_username_yes":
            bot.answer_callback_query(call.id, "–û—Ç–ª–∏—á–Ω–æ!")
            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ :)")
            user_states_random_coffee[chat_id]["stage"] = "info_1"
        else:
            bot.answer_callback_query(call.id, "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–≤–µ–¥—ë–º –∑–∞–Ω–æ–≤–æ")
            bot.send_message(chat_id, "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
            user_states_random_coffee[chat_id]["stage"] = "get_username"
            # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∫–∞

    # --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è actual –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ 17:00 ---
    def update_actual_flag():
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("UPDATE users_random_coffee SET actual = FALSE, is_new = FALSE")
        conn.commit()
        cursor.close()
        conn.close()
        print("[RandomCoffee] –§–ª–∞–≥–∏ actual —Å–±—Ä–æ—à–µ–Ω—ã")
    
    # --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä –≤ —á–µ—Ç–≤–µ—Ä–≥ –≤ 18:30 ---
    def form_pairs_and_notify():
        conn = connect_db()
        cursor = conn.cursor()
    
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö actual = TRUE
        cursor.execute("SELECT user_id, telegram_name, user_info FROM users_random_coffee WHERE actual = TRUE")
        users = cursor.fetchall()
    
        if len(users) < 2:
            print("[RandomCoffee] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä")
            cursor.close()
            conn.close()
            return
    
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        random.shuffle(users)
        used_users = set()
        pairs = []
    
        for i in range(len(users)):
            user1 = users[i]
            if user1[0] in used_users:
                continue
    
            for j in range(i + 1, len(users)):
                user2 = users[j]
                if user2[0] in used_users:
                    continue
    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ)
                user_ids_sorted = sorted([user1[0], user2[0]])
                cursor.execute("""
                    SELECT 1 FROM random_coffee_matches
                    WHERE (user1_id = %s AND user2_id = %s)
                       OR (user1_id = %s AND user2_id = %s)
                """, (user_ids_sorted[0], user_ids_sorted[1], user_ids_sorted[1], user_ids_sorted[0]))
    
                if cursor.fetchone() is None:
                    pairs.append((user1, user2))
                    used_users.add(user1[0])
                    used_users.add(user2[0])
                    break  # –Ω–∞—à–ª–∏ –ø–∞—Ä—É ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –ø–∞—Ä—ã
        remaining_users = [user for user in users if user[0] not in used_users]
        for u in remaining_users:
            print(f"[RandomCoffee] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u[0]} –±–µ–∑ –ø–∞—Ä—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã
        for (user1, user2) in pairs:
            user1_id, user1_name, user1_info = user1
            user2_id, user2_name, user2_info = user2
    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
            cursor.execute("""
                INSERT INTO random_coffee_matches (user1_id, user2_id, matched_at)
                VALUES (%s, %s, NOW())
            """, (user1_id, user2_id))
    
            try:
                bot.send_message(user1_id, f"–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {user2_name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {user2_info}")
                maybe_send_sticker(user1_id)
                show_main_menu(user1_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user1_id}: {e}")
    
            try:
                bot.send_message(user2_id, f"–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {user1_name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {user1_info}")
                maybe_send_sticker(user2_id)
                show_main_menu(user2_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user2_id}: {e}")
    
        conn.commit()
        cursor.close()
        conn.close()
    
        print("[RandomCoffee] –ü–∞—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    def send_monday_invites():
        print("== send_monday_invites called ==") 
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("""SELECT user_id FROM users_random_coffee
        WHERE is_new = FALSE""")
        all_users = cursor.fetchall()
    
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton("–ö–æ–Ω–µ—á–Ω–æüíú"),
            types.KeyboardButton("–ù–µ —Å–µ–π—á–∞—Å")
        )
    
        for (user_id,) in all_users:
            try:
                bot.send_message(user_id, "–•–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –µ—â–µ —Å –∫–µ–º-–Ω–∏–±—É–¥—å?", reply_markup=keyboard)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
        cursor.close()
        conn.close()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    def maybe_send_sticker(user_id):
        choices = STICKERS_RANDOM_COFFEE + [None]  
        sticker = random.choice(choices)
        if sticker:
            try:
                bot.send_sticker(user_id, sticker)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    schedule.every().thursday.at("17:00").do(update_actual_flag)
    schedule.every().thursday.at("18:30").do(form_pairs_and_notify)
    schedule.every().monday.at("11:00").do(send_monday_invites)
    
    import threading
    
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(1)
    
    threading.Thread(target=run_scheduler, daemon=True).start()